diff -Nurd lua-5.3/src/ldo.c lua-5.3/src/ldo.c
--- lua-5.3/src/ldo.c	2022-04-25 22:48:49.040393560 +0300
+++ lua-5.3/src/ldo.c	2022-02-20 11:50:43.688283741 +0200
@@ -60,7 +60,7 @@
 	try { a } catch(...) { if ((c)->status == 0) (c)->status = -1; }
 #define luai_jmpbuf		int  /* dummy variable */
 
-#elif defined(LUA_USE_POSIX)				/* }{ */
+#elif defined(LUA_USE_ULONGJMP)				/* }{ */
 
 /* in POSIX, try _longjmp/_setjmp (more efficient) */
 #define LUAI_THROW(L,c)		_longjmp((c)->b, 1)
@@ -127,9 +127,9 @@
         lua_unlock(L);
         g->panic(L);  /* call panic function (last chance to jump out) */
       }
-      abort();
     }
   }
+  abort();
 }
 
 
diff -Nurd lua-5.3/src/liolib.c lua-5.3/src/liolib.c
--- lua-5.3/src/liolib.c	2022-04-25 22:48:49.040393560 +0300
+++ lua-5.3/src/liolib.c	2022-01-18 20:05:30.233063648 +0200
@@ -54,7 +54,7 @@
 
 #if !defined(l_popen)		/* { */
 
-#if defined(LUA_USE_POSIX)	/* { */
+#if defined(LUA_USE_POPEN)      /* { */
 
 #define l_popen(L,c,m)		(fflush(NULL), popen(c,m))
 #define l_pclose(L,file)	(pclose(file))
@@ -103,7 +103,7 @@
 
 #if !defined(l_fseek)		/* { */
 
-#if defined(LUA_USE_POSIX)	/* { */
+#if defined(LUA_USE_FSEEKO)	/* { */
 
 #include <sys/types.h>
 
diff -Nurd lua-5.3/src/loslib.c lua-5.3/src/loslib.c
--- lua-5.3/src/loslib.c	2022-04-25 22:48:49.040393560 +0300
+++ lua-5.3/src/loslib.c	2022-01-18 20:05:30.233063648 +0200
@@ -81,7 +81,7 @@
 ** where it uses gmtime_r/localtime_r
 */
 
-#if defined(LUA_USE_POSIX)	/* { */
+#if defined(LUA_USE_GMTIME_R)   /* { */
 
 #define l_gmtime(t,r)		gmtime_r(t,r)
 #define l_localtime(t,r)	localtime_r(t,r)
@@ -108,7 +108,7 @@
 */
 #if !defined(lua_tmpnam)	/* { */
 
-#if defined(LUA_USE_POSIX)	/* { */
+#if defined(LUA_USE_MKSTEMP)    /* { */
 
 #include <unistd.h>
 
diff -Nurd lua-5.3/src/lparser.c lua-5.3/src/lparser.c
--- lua-5.3/src/lparser.c	2022-04-25 22:46:59.539834735 +0300
+++ lua-5.3/src/lparser.c	2022-04-25 22:48:11.376202358 +0300
@@ -300,6 +300,7 @@
     expdesc key;
     singlevaraux(fs, ls->envn, var, 1);  /* get environment variable */
     lua_assert(var->k != VVOID);  /* this one must exist */
+    luaK_exp2anyregup(fs, var);  /* but could be a constant */
     codestring(ls, &key, varname);  /* key is variable name */
     luaK_indexed(fs, var, &key);  /* env[varname] */
   }
diff -Nurd lua-5.3/src/lstring.c lua-5.3/src/lstring.c
--- lua-5.3/src/lstring.c	2022-04-25 22:48:49.040393560 +0300
+++ lua-5.3/src/lstring.c	2022-01-18 20:05:30.233063648 +0200
@@ -133,12 +133,14 @@
   TString *ts;
   GCObject *o;
   size_t totalsize;  /* total size of TString object */
+  char *str;
   totalsize = sizelstring(l);
   o = luaC_newobj(L, tag, totalsize);
   ts = gco2ts(o);
   ts->hash = h;
   ts->extra = 0;
-  getstr(ts)[l] = '\0';  /* ending 0 */
+  str = getstr(ts);
+  str[l] = '\0';  /* ending 0 */
   return ts;
 }
 
diff -Nurd lua-5.3/src/luaconf.h lua-5.3/src/luaconf.h
--- lua-5.3/src/luaconf.h	2022-04-25 22:48:49.040393560 +0300
+++ lua-5.3/src/luaconf.h	2022-01-18 20:05:30.233063648 +0200
@@ -11,6 +11,7 @@
 #include <limits.h>
 #include <stddef.h>
 
+#include "localluaconf.h"
 
 /*
 ** ===================================================================
@@ -61,14 +62,12 @@
 #if defined(LUA_USE_LINUX)
 #define LUA_USE_POSIX
 #define LUA_USE_DLOPEN		/* needs an extra library: -ldl */
-#define LUA_USE_READLINE	/* needs some extra libraries */
 #endif
 
 
 #if defined(LUA_USE_MACOSX)
 #define LUA_USE_POSIX
 #define LUA_USE_DLOPEN		/* MacOS does not need -ldl */
-#define LUA_USE_READLINE	/* needs an extra library: -lreadline */
 #endif
 
 
